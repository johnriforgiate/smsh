#!/usr/bin/env python3

import sys
import paramiko
import datetime
import json
import warnings

# Remove cryptography warning that results from paramiko implementation
warnings.filterwarnings(action='ignore', module='.*paramiko.*')

# Global variable storing the current ssh client
ssh_client = paramiko.SSHClient()


def help_menu():
    print("\nsmsh, a CLI for sending SMS messages over an SSH interface with your phone")
    print("\nBelow you will find a list of options to use when running this tool:")
    print("-s or --send   ->  Send SMS text message")
    print("-r or --read   ->  Read last most recent texts up to a specified number")
    print("-b or --backup ->  Backup last however many texts onto your computer")
    print("-v or --view   ->  View backup texts organized by threads")
    print("-o or --out    ->  Output a readable text file of the messages in a thread using -o or --out")
    print("-h or --help   ->  Displays this list of possible commands (this message)")


# TODO: Implement without magic numbers and have a better error message for when connection did not succeed
def ssh_init():
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh_client.connect(hostname="10.132.10.25", username="u0_a72", port=8022, timeout=10)


# Takes in a command to send over ssh and a status to display to users as it is working.
def ssh_command(command_string, status_string):
    try:
        stdin, stdout, stderr = ssh_client.exec_command(command_string)
        print(status_string)
        exit_status = stdout.channel.recv_exit_status()  # Blocking call
        if exit_status == 0:
            print("Commmands successfully run")
        else:
            print("Error", exit_status)
        return stdin, stdout, stderr
    except:
        print("A communication error has occurred")
        exit(1)


def ssh_close():
    ssh_client.close()


# Only works if ssh client is open
def retrieve_file(remote_file_path, client_file_path):
    ftp_client = ssh_client.open_sftp()
    ftp_client.get(remote_file_path, client_file_path)
    ftp_client.close()


def send(argv):
    # Exit if there is not at least a phone number and a message.
    if len(argv) < 2:
        print("Not enough arguments, try running with phone number, then message. For example:")
        print("smsh -s 1234567890 Your Message\nSends 'Your Message' to number 1234567890")
        exit(1)

    # Check that the first argument is a valid phone number.
    # This may need to be changed to accomodate +1 and ()
    if (not argv[0].isdigit()) or len(argv[0]) != 10:
        print("Number is not formatted properly. Try inputting a 10 digit phone number numbers only. For example:")
        print("smsh -s 1234567890 Your Message\nSends 'Your Message' to number 1234567890")
        exit(1)

    # Recreate the message string from the remaining arguments.
    message_string = ' '.join(map(str, argv[1:]))

    # Check to make sure the message is a valid length.
    if len(message_string) > 160:
        print("Message is more than 160 characters. Android can only send single messages up to 160 characters.")
        print("Please try sending a shorter message.")
        exit(1)

    # Assemble the command string to send a message on the phone.
    command_string = "termux-sms-send -n " + argv[0] + " " + message_string

    # Send the actual command to the phone.
    ssh_init()
    ssh_command(command_string, status_string="Sending a text message from your phone...")
    ssh_close()

    # Print a "reassuring" completion message.
    print("Your message: \"" + message_string + "\" was sent successfully (probably).")


def read():
    ssh_init()
    ssh_command("termux-sms-list -l 100 > unread.json", "Checking for unread messages...")
    print("Retrieving backup from phone.")
    retrieve_file("/data/data/com.termux/files/home/unread.json", "/home/johnriforgiate/unread.json")
    ssh_command("rm unread.json", "Removing temporary json file from phone.")

    # Close the SSH session
    ssh_close()
    unread_messages = 0
    with open('/home/johnriforgiate/unread.json') as json_file:
        data = json.load(json_file)
        for p in data:
            if p["read"] == False:
                try:
                    print("- _" + p["sender"] + "_   " + p["received"])
                except:
                    print("- _Me_   " + p["received"])
                    pass
                print("  - " + p["body"])
                unread_messages = unread_messages + 1
    print("You have " + str(unread_messages) + " unread messages.")
    exit(0)


def backup():
    # Create a helpful status message warning users that this takes a bit
    status_string = ("Backing up all text conversations on your phone."
                     + "\nThis could take awhile, relax and get a cup of coffee. :)")

    # Store all texts in a temporary backup file.
    ssh_init()
    ssh_command("termux-sms-list -l 999999999 -t all > smsLog.json", status_string)

    # Set a unique file name so that the databases won't be overwritten and users can have multiple backups.
    now = datetime.datetime.now()
    file_string = "/home/johnriforgiate/" + now.strftime("%Y-%m-%d_%H-%M") + "_SMS_backup.json"

    # Retrieve the file from the phone.
    print("Retrieving backup from phone.")
    retrieve_file("/data/data/com.termux/files/home/smsLog.json", file_string)
    ssh_command("rm smsLog.json", "Removing temporary json file from phone.")

    # Close the SSH session
    ssh_close()
    print("Texts backed up in json file located at: " + file_string)


def view():
    print("Viewing backups not yet implemented")
    exit(1)


def out():
    print("Writing to a text file not yet implemented")
    exit(1)


def main(argv):

    # In the case of no arguments passed in ask users to read the help guide
    if len(argv) == 0:
        print('No arguments included, run "smsh -h" for a list of options')
        exit(1)
    if argv[0] == "-s" or argv[0] == "--send":
        send(argv[1:])
        exit(0)
    if argv[0] == "-r" or argv[0] == "--read":
        read()
        exit(0)
    if argv[0] == "-b" or argv[0] == "--backup":
        backup()
        exit(0)
    if argv[0] == "-v" or argv[0] == "--view":
        view()
        exit(0)
    if argv[0] == "-o" or argv[0] == "--out":
        out()
        exit(0)
    if argv[0] == "-h" or argv[0] == "--help":
        help_menu()
        exit(0)

    print('Not a valid argument combination, run "smsh -h" for a list of options')
    exit(1)


if __name__ == "__main__":
    main(sys.argv[1:])
