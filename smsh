#!/usr/bin/env python3

import sys
import paramiko

ssh_client = paramiko.SSHClient()

def help_menu():
    print("\nsmsh, a CLI for sending SMS messages over an SSH interface with your phone")
    print("\nBelow you will find a list of options to use when running this tool:")
    print("-s or --send   ->  Send SMS text message")
    print("-r or --read   ->  Read last most recent texts up to a specified number")
    print("-b or --backup ->  Backup last however many texts onto your computer")
    print("-v or --view   ->  View backup texts organized by threads")
    print("-o or --out    ->  Output a readable text file of the messages in a thread using -o or --out")
    print("-h or --help   ->  Displays this list of possible commands (this message)")


def ssh_command(command_string):
    try:
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_client.connect(hostname="10.132.18.192", username="u0_a72", port=8022, timeout=10)
        stdin, stdout, stderr = ssh_client.exec_command(command_string)
        ssh_client.close()
        return stdin, stdout, stderr
    except:
        print("A communication error has occurred")
        exit(1)


def send(argv):
    # Exit if there is not at least a phone number and a message.
    if len(argv) < 2:
        print("Not enough arguments, try running with phone number, then message. For example:")
        print("smsh -s 1234567890 Your Message\nSends 'Your Message' to number 1234567890")
        exit(1)
    # Check that the first argument is a valid phone number.
    if (not argv[0].isdigit()) or len(argv[0]) != 10:
        print("Number is not formatted properly. Try inputting a 10 digit phone number numbers only. For example:")
        print("smsh -s 1234567890 Your Message\nSends 'Your Message' to number 1234567890")
        exit(1)
    # Recreate the message string from the remaining arguments.
    message_string = ' '.join(map(str, argv[1:]))
    # command_string = "termux-sms-send -n " + argv[0] + " " + message_string
    # Check to make sure the message is a valid length.
    if len(message_string) > 160:
        print("Message is more than 160 characters. Android can only send single messages up to 160 characters.")
        print("Please try sending a shorter message.")
        exit(1)
    # Assemble the command string to send a message on the phone.
    command_string = "termux-sms-send -n " + argv[0] + " " + message_string
    # Send the actual command to the phone.
    ssh_command(command_string)
    print("Your message: \"" + message_string + "\" was sent successfully (probably).")
    exit(0)


def read():
    print("Reading from a file not yet implemented")
    exit(1)


def backup():
    print("Backing up texts not yet implemented")
    exit(1)


def view():
    print("Viewing backups not yet implemented")
    exit(1)


def out():
    print("Writing to a text file not yet implemented")
    exit(1)


def main(argv):

    # In the case of no arguments passed in ask users to read the help guide
    if len(argv) == 0:
        print('No arguments included, run "smsh -h" for a list of options')
        exit(1)
    if argv[0] == "-s" or argv[0] == "--send":
        send(argv[1:])
        exit(0)
    if argv[0] == "-r" or argv[0] == "--read":
        read()
        exit(0)
    if argv[0] == "-b" or argv[0] == "--backup":
        backup()
        exit(0)
    if argv[0] == "-v" or argv[0] == "--view":
        view()
        exit(0)
    if argv[0] == "-o" or argv[0] == "--out":
        out()
        exit(0)
    if argv[0] == "-h" or argv[0] == "--help":
        help_menu()
        exit(0)


if __name__ == "__main__":
    main(sys.argv[1:])
